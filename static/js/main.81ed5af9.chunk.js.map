{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/selectionSort.js","SortingAlgorithms/quickSort.js","SortingAlgorithms/heapSort.js","SortingVisualiser/SortingVisualiser.jsx","SortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getSelectionSortAnimations","n","minIdx","swap","selectionSort","tmp","getQuickSortAnimations","quickSort","A","fe","fg","index","pivot","pivotIdx","hoarePartition","getHeapSortAnimations","siftDown","buildHeap","active","heapSort","sortedArray","sort","a","b","array1","array2","validateArray","console","log","parent","child","isRunning","SortingVisualiser","props","AlgorithmInfoElement","React","createRef","state","this","reset_array","window","location","reload","min","max","array_size","parseInt","innerWidth","max_size","innerHeight","random","setState","toggleBtn","current","updateInfo","arrayBars","document","getElementsByClassName","barOneIdxStyle","style","barTwoIdxStyle","setTimeout","backgroundColor","barOneStyle","barTwoStyle","barOneHeight","height","v","insertionSort","getInsertionSortAnimations","barOneIdx","barTwoIdx","color","newHeight","colour","tempHeight","barStyle","barHeight","barTwoHeight","idArray","btn","getElementById","disabled","className","id","onClick","selection_sort","insertion_sort","merge_sort","heap_sort","quick_sort","map","value","idx","key","ref","Component","AlgorithmInfo","name","bestCase","avgCase","worstCase","spaceC","inPlace","stable","misc","Newname","NewBest","NewAvg","NewWorst","NewSpace","NewInPlace","NewStable","NewMisc","onresize","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAI7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAhBhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GAErDA,ECMJ,SAASgB,EAA2BjB,GACvC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAOlC,SAAuBA,EAAOkB,EAAGjB,GAC7B,IAAK,IAAIY,EAAI,EAAGA,EAAIK,EAAGL,IAAI,CAIvB,IAHA,IAAIM,EAASN,EAGJC,EAAID,EAAE,EAAGC,EAAII,EAAGJ,IACrBb,EAAWc,KAAK,CAAC,cAAeD,EAAGK,EAAQN,IAC3CZ,EAAWc,KAAK,CAAC,cAAeD,EAAGK,EAAQN,IACvCb,EAAMc,GAAKd,EAAMmB,KAEjBA,EAASL,GAIjBb,EAAWc,KAAK,CAAC,OAAQF,EAAGM,EAAQN,IACpCO,EAAKpB,EAAOmB,EAAQN,IApBxBQ,CAAcrB,EAAOA,EAAME,OAAQD,GAC5BA,GAyBX,SAASmB,EAAKpB,EAAOa,EAAGC,GACpB,IAAIQ,EAAMtB,EAAMa,GAChBb,EAAMa,GAAKb,EAAMc,GACjBd,EAAMc,GAAKQ,ECjCR,SAASC,EAAuBvB,GACnC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAMlC,SAASwB,EAAUC,EAAGC,EAAIC,EAAI1B,GAC1B,GAAIyB,GAAMC,EAAI,OACd1B,EAAWc,KAAK,CAAC,cAAeW,IAChC,IAAIE,EAUR,SAAwBH,EAAGC,EAAIC,EAAI1B,GAC/B,IAAI4B,EAAQJ,EAAEC,GACVI,EAAWJ,EACfzB,EAAWc,KAAK,CAAC,cAAeW,IAChC,KAAMA,GAAMC,GAAG,CAEX,IADA1B,EAAWc,KAAK,CAAC,cAAee,IAC1BL,EAAEC,GAAMG,GAASH,GAAMC,GACzB1B,EAAWc,KAAK,CAAC,cAAeW,IAChCzB,EAAWc,KAAK,CAAC,cAAeW,IAChCA,IAEJ,KAAMD,EAAEE,GAAME,GACV5B,EAAWc,KAAK,CAAC,cAAeY,IAChC1B,EAAWc,KAAK,CAAC,cAAeY,IAChCA,IAEAD,GAAMC,IACNP,EAAKK,EAAGC,EAAIC,EAAI1B,GAChByB,IACAC,KAKR,OAFA1B,EAAWc,KAAK,CAAC,cAAeW,IAChCzB,EAAWc,KAAK,CAAC,cAAee,IACzBJ,EAlCKK,CAAeN,EAAGC,EAAIC,EAAI1B,GACtCA,EAAWc,KAAK,CAAC,cAAeW,IAEhCF,EAAUC,EAAGC,EAAIE,EAAQ,EAAG3B,GAC5BuB,EAAUC,EAAGG,EAAOD,EAAI1B,GAXxBuB,CAAUxB,EAAO,EAAGA,EAAME,OAAS,EAAGD,GAC/BA,GA4CX,SAASmB,EAAKpB,EAAOa,EAAGC,EAAGb,GACvBA,EAAWc,KAAK,CAAC,cAAeF,EAAGC,IACnCb,EAAWc,KAAK,CAAC,cAAeF,EAAGC,IACnCb,EAAWc,KAAK,CAAC,OAAQF,EAAGC,IAE5B,IAAIQ,EAAMtB,EAAMa,GAChBb,EAAMa,GAAKb,EAAMc,GACjBd,EAAMc,GAAKQ,EC3DR,SAASU,EAAsBhC,GAClC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,GAalC,SAAkBA,EAAOkB,EAAGjB,IAW5B,SAAmBD,EAAOkB,EAAGjB,GAC3B,IAAI,IAAIY,EAAIH,KAAKC,MAAMO,EAAE,GAAIL,GAAI,EAAGA,IAClCoB,EAASjC,EAAOa,EAAGK,EAAGjB,GAZtBiC,CAAUlC,EAAOkB,EAAGjB,GAIpB,IAAI,IAAIkC,EAASjB,EAAI,EAAGiB,EAAS,EAAGA,IAChCf,EAAKpB,EAAO,EAAGmC,EAAQlC,GACvBgC,EAASjC,EAAO,EAAGmC,EAAQlC,GAlB/BmC,CAASpC,EAAOA,EAAME,OAAQD,GAG9B,IAAMoC,EAAcrC,EAAMsC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAK7C,OAgDJ,SAAuBC,EAAQC,GAC3B,GAAID,EAAOvC,SAAWwC,EAAOxC,OACzB,OAAO,EAEX,IAAK,IAAIW,EAAI,EAAGA,EAAI4B,EAAOvC,OAAQW,IACjC,GAAI4B,EAAO5B,KAAO6B,EAAO7B,GACvB,OAAO,EAGX,OAAO,EA7DH8B,CAAc3C,EAAOqC,GAEnBO,QAAQC,IAAI,sBADdD,QAAQC,IAAI,WAGT5C,EAoBX,SAASgC,EAASjC,EAAO8C,EAAQ5B,EAAGjB,GAClC,IAAI8C,EAAQ,EAAID,EAAS,EACrBC,EAAQ7B,IAEN6B,EAAQ,EAAI7B,GAAKlB,EAAM+C,GAAS/C,EAAM+C,EAAQ,KAE9C9C,EAAWc,KAAK,CAAC,aAAcgC,EAAOA,EAAM,IAC5C9C,EAAWc,KAAK,CAAC,aAAcgC,EAAOA,EAAM,IAC5CA,KAEA/C,EAAM8C,GAAU9C,EAAM+C,KAEtB3B,EAAKpB,EAAO8C,EAAQC,EAAO9C,GAC3BgC,EAASjC,EAAO+C,EAAO7B,EAAGjB,KAMlC,SAASmB,EAAKpB,EAAOa,EAAGC,EAAGb,GACvBA,EAAWc,KAAK,CAAC,aAAcF,EAAGC,IAClCb,EAAWc,KAAK,CAAC,aAAcF,EAAGC,IAClCb,EAAWc,KAAK,CAAC,OAAQF,EAAGC,IAC5B,IAAIQ,EAAMtB,EAAMa,GAChBb,EAAMa,GAAKb,EAAMc,GACjBd,EAAMc,GAAKQ,EC3Df,IAOI0B,GAAY,EAEKC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,qBAAuBC,IAAMC,YAElC,EAAKC,MAAQ,CACTtD,MAAO,IALG,E,gEAUduD,KAAKC,gB,qCAIa,IAAdR,IACAA,GAAY,EACZS,OAAOC,SAASC,QAAO,IAG3B,IAuY0BC,EAAKC,EAvYzB7D,EAAQ,GACR8D,EAAaC,SAAUN,OAAOO,WAAY,IAC5CC,EAAWF,SAASN,OAAOS,YAAmC,IAArBT,OAAOS,aAChDD,EAAW,MAAKA,EAAW,KAE/B,IAAI,IAAIpD,EAAI,EAAGA,EAAIiD,EAAYjD,IAC3Bb,EAAMe,MAiYgB6C,EAhalB,EAgauBC,EAjYkBI,EAkY9CvD,KAAKC,MAAMD,KAAKyD,UAAYN,EAAMD,EAAM,GAAKA,KAhYhDL,KAAKa,SAAS,CAACpE,Y,uCAIF,IAAD,OACZuD,KAAKc,YACLrB,GAAY,EAGZO,KAAKJ,qBAAqBmB,QAAQC,WAC9B,kBACA,cACA,cACA,SACA,OACA,6CACA,MACA,8EAMJ,IAHA,IAAMtE,EAAagB,EAA2BsC,KAAKD,MAAMtD,OACnDwE,EAAYC,SAASC,uBAAuB,aAjBtC,WAmBH7D,GACL,IAAM8D,EAAiBH,EAAUvE,EAAWY,GAAG,IAAI+D,MAC7CC,EAAiBL,EAAUvE,EAAWY,GAAG,IAAI+D,MAC1B,gBAArB3E,EAAWY,GAAG,GAEdiE,YAAW,WACPH,EAAeI,gBAhEX,QAiEJF,EAAeE,gBAjEX,UAFG,EAoERlE,GAEwB,gBAArBZ,EAAWY,GAAG,GACpBiE,YAAW,WAEHjE,EAAIZ,EAAWC,QACXD,EAAWY,EAAI,GAAG,KAAOZ,EAAWY,GAAG,KACvCgE,EAAeE,gBA1ErB,WA6EFJ,EAAeI,gBA7Eb,YADK,EA+ERlE,GAGHiE,YAAW,WACP,IAAME,EAAcR,EAAUvE,EAAWY,GAAG,IAAI+D,MAC1CK,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAE1CM,EAAenB,SAASiB,EAAYG,QAC1CH,EAAYG,OAAZ,UAAwBpB,SAASkB,EAAYE,QAA7C,MACAF,EAAYE,OAAZ,UAAwBD,EAAxB,MAEAF,EAAYD,gBAzFV,UA0FFE,EAAYF,gBA1FV,YADK,EA4FRlE,GAIHA,IAAMZ,EAAWC,OAAS,GAC1B4E,YAAW,WACP,EAAKT,YACLrB,GAAa,IAnGN,EAoGRnC,IAxCFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,uCA8CI,IAAD,OACZ0C,KAAKc,YACLrB,GAAY,EAGZO,KAAKJ,qBAAqBmB,QAAQC,WAC9B,kBACA,YACA,cACA,SACA,OACA,uCACA,6CACA,6FAOJ,IAJA,IAAMtE,ECrHP,SAAoCD,GACvC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAOlC,SAAuBA,EAAOkB,EAAGjB,GAC7B,IAAK,IAAIY,EAAI,EAAGA,EAAIK,EAAGL,IAAI,CACvB,IAAIuE,EAAIpF,EAAMa,GACVC,EAAID,EAAI,EAIZ,IAFAZ,EAAWc,KAAK,CAAC,cAAeF,IAE1BC,GAAK,GAAKd,EAAMc,GAAKsE,GACvBnF,EAAWc,KAAK,CAAC,cAAeD,IAChCd,EAAMc,EAAI,GAAKd,EAAMc,GACrBb,EAAWc,KAAK,CAAC,eAAgBD,EAAI,EAAGd,EAAMc,KAC9Cb,EAAWc,KAAK,CAAC,cAAeD,IAChCA,IAEJd,EAAMc,EAAI,GAAKsE,EACfnF,EAAWc,KAAK,CAAC,eAAgBD,EAAI,EAAGsE,IACxCnF,EAAWc,KAAK,CAAC,cAAeF,KArBpCwE,CAAcrF,EAAOA,EAAME,OAAQD,GAC5BA,GDgHgBqF,CAA2B/B,KAAKD,MAAMtD,OACnDwE,EAAYC,SAASC,uBAAuB,aAjBtC,WAoBH7D,GACL,IAAMmE,EAAcR,EAAUvE,EAAWY,GAAG,IAAI+D,MAGvB,gBAArB3E,EAAWY,GAAG,GACdiE,YAAW,WACPE,EAAYD,gBAlIR,UAFG,EAqIRlE,GAGwB,gBAArBZ,EAAWY,GAAG,GACpBiE,YAAW,WACPE,EAAYD,gBAzIV,YADK,EA2IRlE,GAGHiE,YAAW,WACPE,EAAYG,OAAZ,UAAwBlF,EAAWY,GAAG,GAAtC,QA/IO,EAgJRA,GAIHA,IAAMZ,EAAWC,OAAS,GAC1B4E,YAAW,WACP,EAAKT,YACLrB,GAAa,IAvJN,EAwJRnC,IA1BFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,mCAiCA,IAAD,OACR0C,KAAKc,YACLrB,GAAY,EAGZO,KAAKJ,qBAAqBmB,QAAQC,WAC9B,cACA,gBACA,gBACA,WACA,OACA,6EACA,0FACA,qLAIJ,IADA,IAAMtE,EAAaF,EAAuBwD,KAAKD,MAAMtD,OAhB7C,WAiBCa,GACP,IAAM2D,EAAYC,SAASC,uBAAuB,aAElD,GADsB7D,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACV0E,EADU,KACCC,EADD,KAEXR,EAAcR,EAAUe,GAAWX,MACnCK,EAAcT,EAAUgB,GAAWZ,MACnCa,EAAQ5E,EAAI,IAAM,EArLZ,QADF,UAuLViE,YAAW,WACTE,EAAYD,gBAAkBU,EAC9BR,EAAYF,gBAAkBU,IA1LjB,EA2LZ5E,QAEHiE,YAAW,WAAO,IAAD,cACgB7E,EAAWY,GAD3B,GACR0E,EADQ,KACGG,EADH,KAEKlB,EAAUe,GAAWX,MAC7BO,OAAZ,UAAwBO,EAAxB,QAhMa,EAiMZ7E,GAICA,IAAMZ,EAAWC,OAAS,GAC1B4E,YAAW,WACP,EAAKT,YACLrB,GAAa,IAxMN,EAyMRnC,IAzBFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCA+BD,IAAD,OACP0C,KAAKc,YACLrB,GAAY,EAGZO,KAAKJ,qBAAqBmB,QAAQC,WAC9B,aACA,gBACA,gBACA,WACA,OACA,2DACA,sCACA,8HAGJ3B,QAAQC,IAAIU,KAAKD,MAAMA,OACvB,IAAMrD,EAAa+B,EAAsBuB,KAAKD,MAAMtD,OAC9CwE,EAAYC,SAASC,uBAAuB,aAElD9B,QAAQC,IAAI5C,EAAWC,QACvB,IArBO,eAqBCW,GACqB,eAArBZ,EAAWY,GAAG,GACdiE,YAAW,WACP,IAGIa,EAHEX,EAAcR,EAAUvE,EAAWY,GAAG,IAAI+D,MAC1CK,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAGEe,EAzO9C,UAyOJX,EAAYD,gBA1OV,UACE,QA2OJC,EAAYD,gBAAkBY,EAC9BV,EAAYF,gBAAkBY,IA9OvB,EAgPN9E,GAELiE,YAAW,WACP,IAAME,EAAcR,EAAUvE,EAAWY,GAAG,IAAI+D,MAC1CK,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAE1CgB,EAAa7B,SAASiB,EAAYG,QACxCH,EAAYG,OAAZ,UAAwBpB,SAASkB,EAAYE,QAA7C,MACAF,EAAYE,OAAZ,UAAwBS,EAAxB,QAxPO,EAyPR/E,GAIHA,IAAMZ,EAAWC,OAAS,GAC1B4E,YAAW,WACP,EAAKT,YACLrB,GAAa,IAhQN,EAiQRnC,IA7BHA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,mCAmCC,IAAD,OACR0C,KAAKc,YACLrB,GAAY,EAGZO,KAAKJ,qBAAqBmB,QAAQC,WAClC,cACA,gBACA,gBACA,SACA,UACA,uDACA,sCACA,wNAKA,IAFA,IAAMtE,EAAasB,EAAuBgC,KAAKD,MAAMtD,OAC/CwE,EAAYC,SAASC,uBAAuB,aAjB1C,WAkBA7D,GACJ,IAAMgF,EAAWrB,EAAUvE,EAAWY,GAAG,IAAI+D,MACpB,gBAArB3E,EAAWY,GAAG,GACdiE,YAAW,WACPe,EAASd,gBA3RL,UAFG,EA8RNlE,GACsB,gBAArBZ,EAAWY,GAAG,GACpBiE,YAAW,WACPe,EAASd,gBAhSP,YADK,EAkSRlE,GACwB,gBAArBZ,EAAWY,GAAG,GACpBiE,YAAW,WACP,IAAMG,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAChDiB,EAASd,gBApSL,QAqSJE,EAAYF,gBArSR,UAFG,EAwSRlE,GACwB,gBAArBZ,EAAWY,GAAG,GACpBiE,YAAW,WACP,IAAMG,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAChDiB,EAASd,gBA3SP,UA4SFE,EAAYF,gBA5SV,YADK,EA8SRlE,GAEHiE,YAAW,WACP,IAAMgB,EAAY/B,SAAS8B,EAASV,QAE9BF,EAAcT,EAAUvE,EAAWY,GAAG,IAAI+D,MAC1CmB,EAAehC,SAASkB,EAAYE,QAE1CU,EAASV,OAAT,UAAqBY,EAArB,MACAd,EAAYE,OAAZ,UAAwBW,EAAxB,QAvTO,EAwTRjF,GAIHA,IAAMZ,EAAWC,OAAS,GAC1B4E,YAAW,WACP,EAAKT,YACLrB,GAAY,IA/TL,EAgURnC,IAvCHA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,kCA+CR,IADA,IAAMmF,EAAU,CAAC,mBAAoB,mBAAoB,eAAgB,cAAe,gBAChFnF,EAAI,EAAGA,EAAImF,EAAQ9F,OAAQW,IAAI,CACnC,IAAIoF,EAAOxB,SAASyB,eAAeF,EAAQnF,IAC3CoF,EAAIE,UAAYF,EAAIE,Y,+BAInB,IAAD,OACGnG,EAASuD,KAAKD,MAAdtD,MACP,OACI,oCACA,yBAAKoG,UAAU,UACX,4DACA,sDACA,yBAAKA,UAAU,WACX,4BAAQC,GAAG,WAAWC,QAAS,kBAAM,EAAK9C,gBAA1C,mBACA,4BAAQ6C,GAAG,mBAAmBC,QAAS,kBAAM,EAAKC,mBAAlD,kBACA,4BAAQF,GAAG,mBAAmBC,QAAS,kBAAM,EAAKE,mBAAlD,kBACA,4BAAQH,GAAG,eAAeC,QAAS,kBAAM,EAAKG,eAA9C,cACA,4BAAQJ,GAAG,cAAcC,QAAS,kBAAM,EAAKI,cAA7C,aACA,4BAAQL,GAAG,eAAeC,QAAS,kBAAM,EAAKK,eAA9C,gBAGR,yBAAKP,UAAU,mBACVpG,EAAM4G,KAAI,SAACC,EAAOC,GAAR,OACP,yBAAKV,UAAU,YACfW,IAAKD,EACLlC,MAAO,CAACO,OAAO,GAAD,OAAK0B,EAAL,aAItB,kBAAC,EAAD,CAAeG,IAAKzD,KAAKJ,4B,GA7VUC,IAAM6D,WAmW/CC,E,4MACF5D,MAAQ,CACJ6D,KAAM,wBACNC,SAAU,GACVC,QAAS,GACTC,UAAW,GAEXC,OAAQ,GAERC,QAAS,GACTC,OAAQ,GACRC,KAAM,I,yDAICC,EAASC,EAASC,EAAQC,EAAUC,EAAUC,EAAYC,EAAWC,GAC5E3E,KAAKa,SAAS,CACV+C,KAAMQ,EACNP,SAAUQ,EACVP,QAASQ,EACTP,UAAWQ,EACXP,OAAQQ,EACRP,QAASQ,EACTP,OAAQQ,EACRP,KAAMQ,M,+BAMV,OACI,yBAAK9B,UAAU,kBACX,4BAAK7C,KAAKD,MAAM6D,MAChB,yBAAKf,UAAU,QACX,6BACI,+CACA,2BAAG,+CAA6B7C,KAAKD,MAAM8D,UAC3C,2BAAG,kDAAgC7D,KAAKD,MAAM+D,SAC9C,2BAAG,gDAA8B9D,KAAKD,MAAMgE,YAEhD,6BACI,gDACA,2BAAG,gDAA8B/D,KAAKD,MAAMiE,SAEhD,6BACI,4CACA,2BAAG,8CAA4BhE,KAAKD,MAAMkE,SAC1C,2BAAG,4CAA0BjE,KAAKD,MAAMmE,QACxC,2BAAG,0CAAwBlE,KAAKD,MAAMoE,a,GAhDlCtE,IAAM6D,WA4DlCxD,OAAO0E,SAAW,WACd1E,OAAOC,SAASC,QAAO,I,MEraZyE,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASyB,eAAe,SDyHpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtG,QAAQsG,MAAMA,EAAMC,c","file":"static/js/main.81ed5af9.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    \r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","/**\r\n * \r\n * Selection Sort Information\r\n * Time Complexites:\r\n *      Best: Ω(n^2)\r\n *      Avg: Θ(n^2)\r\n *      Worst: O(n^2)\r\n * \r\n * Space Complexity: O(1)\r\n * In-place: Yes\r\n * Stable: Yes\r\n */\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    selectionSort(array, array.length, animations);\r\n    return animations;\r\n}\r\n\r\n// Main processing function\r\nfunction selectionSort(array, n, animations){\r\n    for (let i = 0; i < n; i++){\r\n        var minIdx = i;\r\n\r\n        //Loop through all elements outside sorted range\r\n        for (let j = i+1; j < n; j++){\r\n            animations.push([\"comparison1\", j, minIdx, i]);\r\n            animations.push([\"comparison2\", j, minIdx, i]); // comparison2 ensure that color change goes back to default\r\n            if (array[j] < array[minIdx]){\r\n                //Update minimum\r\n                minIdx = j;\r\n            }\r\n        }\r\n        //Swap smallest element with end of sorted array\r\n        animations.push([\"swap\", i, minIdx, i]);\r\n        swap(array, minIdx, i);\r\n    }\r\n\r\n}\r\n\r\n// Swap array element values\r\nfunction swap(array, i, j){\r\n    let tmp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = tmp;\r\n}\r\n\r\n  ","/**\r\n * \r\n * Quick Sort (with Hoare Partitioning) Information\r\n * Time Complexites:\r\n *      Best: Ω(nlogn)\r\n *      Avg: Θ(nlogn)\r\n *      Worst: O(n^2)\r\n * \r\n * Space Complexity: O(1)\r\n * In-place: Yes, but still requires O(logn) memory for the stack\r\n * Stable: No, non-local swaps\r\n */\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    quickSort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(A, fe, fg, animations){\r\n    if (fe >= fg) return;\r\n    animations.push([\"comparison1\", fe]);\r\n    let index = hoarePartition(A, fe, fg, animations);\r\n    animations.push([\"comparison2\", fe]);\r\n\r\n    quickSort(A, fe, index - 1, animations);\r\n    quickSort(A, index, fg, animations);\r\n}\r\n\r\n/*  Pivot chosen as first element so visually easier to read, despite\r\n    a random pivot being prefeable in practice\r\n*/\r\nfunction hoarePartition(A, fe, fg, animations){\r\n    let pivot = A[fe];\r\n    let pivotIdx = fe;\r\n    animations.push([\"comparison1\", fe]);\r\n    while(fe <= fg){\r\n        animations.push([\"comparison1\", pivotIdx]);\r\n        while(A[fe] < pivot && fe <= fg){\r\n            animations.push([\"comparison1\", fe]);\r\n            animations.push([\"comparison2\", fe]);\r\n            fe++;\r\n        }\r\n        while(A[fg] > pivot){\r\n            animations.push([\"comparison1\", fg]);\r\n            animations.push([\"comparison2\", fg]);\r\n            fg--;\r\n        } \r\n        if (fe <= fg){\r\n            swap(A, fe, fg, animations);\r\n            fe++;\r\n            fg--;\r\n        }\r\n    }\r\n    animations.push([\"comparison2\", fe]);\r\n    animations.push([\"comparison2\", pivotIdx]);\r\n    return fe;\r\n}\r\n\r\n// Swap array element values\r\nfunction swap(array, i, j, animations){\r\n    animations.push([\"comparison3\", i, j]);\r\n    animations.push([\"comparison4\", i, j]);\r\n    animations.push([\"swap\", i, j]);\r\n\r\n    let tmp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = tmp;\r\n}\r\n","/**\r\n * \r\n * Heap Sort Information\r\n * Time Complexiy: Θ(nlogn)\r\n * \r\n * Space Complexity: O(1)\r\n * In-place: Yes, requires O(1) memory for auxiliary variables\r\n * Stable: No, non-local swaps\r\n */\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    heapSort(array, array.length, animations);\r\n\r\n    // Validate implemented sorting algorithm against js sort\r\n    const sortedArray = array.sort((a, b) => a - b);\r\n    if (validateArray(array, sortedArray)){\r\n        console.log(\"sorted!\");\r\n    }else console.log(\"incorrectly sorted\");\r\n\r\n    return animations;\r\n}\r\n\r\nfunction heapSort(array, n, animations){\r\n    buildHeap(array, n, animations); \r\n\r\n    /*  Continuously convert array to a heap and remove the top \r\n        element (largest) and place at end of unsorted region    */\r\n    for(let active = n - 1; active > 0; active--){\r\n        swap(array, 0, active, animations);\r\n        siftDown(array, 0, active, animations);\r\n    }\r\n}\r\n\r\nfunction buildHeap(array, n, animations){\r\n  for(let i = Math.floor(n/2); i >=0; i--){\r\n    siftDown(array, i, n, animations);\r\n  }\r\n}\r\n\r\nfunction siftDown(array, parent, n, animations){\r\n  let child = 2 * parent + 1;\r\n  if (child < n){\r\n      // There is at least one child to be checked\r\n    if (child + 1 < n && array[child] < array[child + 1]){\r\n        // The right child exists and is larger\r\n        animations.push([\"comparison\", child, child+1]);\r\n        animations.push([\"comparison\", child, child+1]);\r\n        child++;\r\n    }\r\n    if (array[parent] < array[child]){\r\n        // Parent is smaller than larger child\r\n        swap(array, parent, child, animations);\r\n        siftDown(array, child, n, animations);\r\n    }\r\n  }\r\n}\r\n\r\n// Swap array element values\r\nfunction swap(array, i, j, animations){\r\n    animations.push([\"comparison\", i, j]);\r\n    animations.push([\"comparison\", i, j]);\r\n    animations.push([\"swap\", i, j]);\r\n    let tmp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = tmp;\r\n}\r\n\r\nfunction validateArray(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < array1.length; i++) {\r\n      if (array1[i] !== array2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\n","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort.js';\r\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/selectionSort.js';\r\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/insertionSort';\r\nimport { getQuickSortAnimations } from '../SortingAlgorithms/quickSort';\r\nimport { getHeapSortAnimations } from '../SortingAlgorithms/heapSort';\r\n\r\nconst ANIMATION_SPEED_MS = 2;\r\nconst PRIMARY_COLOR = '#97C54E';\r\nconst SECONDARY_COLOR = 'white';\r\n\r\nconst MIN_VAL = 5;\r\n\r\n// Indicates whether an algorithm is currently being visualised\r\nlet isRunning = false;\r\n\r\nexport default class SortingVisualiser extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.AlgorithmInfoElement = React.createRef();\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.reset_array();\r\n    }\r\n\r\n    reset_array(){\r\n        if (isRunning === true){\r\n            isRunning = false;\r\n            window.location.reload(false);\r\n        }\r\n\r\n        const array = [];\r\n        const array_size = parseInt((window.innerWidth)/20);\r\n        let max_size = parseInt(window.innerHeight - window.innerHeight * 0.25);\r\n        if (max_size > 730) max_size = 730;\r\n\r\n        for(let i = 0; i < array_size; i++){\r\n            array.push(random_int_from_interval(MIN_VAL, max_size));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    // Functions controls animations for Selection Sort\r\n    selection_sort(){\r\n        this.toggleBtn();\r\n        isRunning = true;\r\n\r\n        // Update algorithm UI for selection sort info\r\n        this.AlgorithmInfoElement.current.updateInfo(\r\n            \"Selection Sort:\",\r\n            \"Ω(n^2)\",\r\n            \"Θ(n^2)\",\r\n            \"O(n^2)\",\r\n            \"O(1)\",\r\n            \"Yes, addition O(1) for auxiliary variables\",\r\n            \"Yes\",\r\n            \"Appropriate for small array sizes. Useful if minimizing swaps is desirable\"\r\n            );\r\n\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        for (let i = 0; i < animations.length; i++){\r\n            const barOneIdxStyle = arrayBars[animations[i][1]].style;\r\n            const barTwoIdxStyle = arrayBars[animations[i][3]].style;\r\n            if (animations[i][0] === \"comparison1\"){\r\n                // Visualise comparison\r\n                setTimeout(() => {\r\n                    barOneIdxStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoIdxStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                // Revert bars back to defualt colour\r\n            }else if (animations[i][0] === \"comparison2\"){\r\n                setTimeout(() => {\r\n                    // Don't revert back end or sorted array if it will not be changed in the next iteration\r\n                    if (i < animations.length){\r\n                        if (animations[i + 1][2] !== animations[i][2]){\r\n                            barTwoIdxStyle.backgroundColor = PRIMARY_COLOR;\r\n                        }\r\n                    }\r\n                    barOneIdxStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }else{\r\n                // Revert colours and change the heights of bars\r\n                setTimeout(() => {\r\n                    const barOneStyle = arrayBars[animations[i][1]].style;\r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                    //Swap heights\r\n                    const barOneHeight = parseInt(barOneStyle.height);\r\n                    barOneStyle.height = `${parseInt(barTwoStyle.height)}px`;\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            // Re-enable the buttons once last animation is processed\r\n            if (i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    this.toggleBtn();\r\n                    isRunning =  false;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Functions controls animations for Insertion Sort\r\n    insertion_sort(){\r\n        this.toggleBtn();\r\n        isRunning = true;\r\n\r\n        // Update algorithm UI for insertion sort info\r\n        this.AlgorithmInfoElement.current.updateInfo(\r\n            \"Insertion Sort:\",\r\n            \"Ω(n)\",\r\n            \"Θ(n^2)\",\r\n            \"O(n^2)\",\r\n            \"O(1)\",\r\n            \"Yes, may need additional O(1) memory\",\r\n            \"Yes, local adjacent swaps ensure stability\",\r\n            \"Good choice when data is almost sorted. Can be made slightly faster using a min sentinel.\"\r\n            );\r\n\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');  \r\n\r\n        // Loop through animations\r\n        for (let i = 0; i < animations.length; i++){\r\n            const barOneStyle = arrayBars[animations[i][1]].style;\r\n\r\n            // Change selected div colour to visualise that it is being used in a comparison\r\n            if (animations[i][0] === \"comparison1\"){\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            // Reset div colour to defualt as it is no longer being compared\r\n            }else if (animations[i][0] === \"comparison2\"){\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            // Change bar heights to visualise swap\r\n            }else{\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${animations[i][2]}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            // Re-enable the buttons once last animation is processed\r\n            if (i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    this.toggleBtn();                   \r\n                    isRunning =  false;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Functions controls animations for Merge Sort\r\n    merge_sort(){\r\n        this.toggleBtn();\r\n        isRunning = true;\r\n\r\n        // Update algorithm UI for merge sort info\r\n        this.AlgorithmInfoElement.current.updateInfo(\r\n            \"Merge Sort:\",\r\n            \"Ω(nlogn)\",\r\n            \"Θ(nlogn)\",\r\n            \"O(nlogn)\",\r\n            \"O(n)\",\r\n            \"No, requires O(n) auxiliary array + O(logn) stack space if using recursion\",\r\n            \"Yes, merge keeps relative order with additional book keeping, i.e. left side goes first\",\r\n            \"Is an excellent choice if stability is required and extra memory cost is low. Guaranteed Θ(nlogn), highly parallelisable, Multiway Mergesort; excellent for secondary memory\"\r\n        );\r\n\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n\r\n            // Re-enable the buttons once last animation is processed\r\n            if (i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    this.toggleBtn();\r\n                    isRunning =  false;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function controls animations for Heap Sort\r\n    heap_sort(){\r\n        this.toggleBtn();\r\n        isRunning = true;\r\n\r\n        // Update algorithm UI for heap sort info\r\n        this.AlgorithmInfoElement.current.updateInfo(\r\n            \"Heap Sort:\",\r\n            \"Ω(nlogn)\",\r\n            \"Θ(nlogn)\",\r\n            \"O(nlogn)\",\r\n            \"O(1)\",\r\n            \"Yes, only additional O(1) memory for auxiliary variables\",\r\n            \"No, non-local swaps break stability\",\r\n            \"Best choice when low memory footprint is required and guaranteed Θ(nlogn) performance is needed, i.e security reasons\"\r\n        );\r\n        \r\n        console.log(this.state.state);\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        console.log(animations.length);\r\n        for(let i = 0; i < animations.length; i++){\r\n            if (animations[i][0] === \"comparison\"){\r\n                setTimeout(() => {\r\n                    const barOneStyle = arrayBars[animations[i][1]].style;\r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n\r\n                    let colour;\r\n                    barOneStyle.backgroundColor === SECONDARY_COLOR ? colour = PRIMARY_COLOR : colour = SECONDARY_COLOR;\r\n\r\n                    barOneStyle.backgroundColor = colour;\r\n                    barTwoStyle.backgroundColor = colour;\r\n\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }else{\r\n                setTimeout(() => {\r\n                    const barOneStyle = arrayBars[animations[i][1]].style;\r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n    \r\n                    const tempHeight = parseInt(barOneStyle.height);\r\n                    barOneStyle.height = `${parseInt(barTwoStyle.height)}px`;\r\n                    barTwoStyle.height = `${tempHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            // Re-enable the buttons once last animation is processed\r\n            if (i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    this.toggleBtn();\r\n                    isRunning =  false;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function controls animations for Quick Sort (Hoare Partitioning)\r\n    quick_sort(){\r\n        this.toggleBtn();\r\n        isRunning = true;\r\n\r\n        // Update algorithm UI for quick sort info\r\n        this.AlgorithmInfoElement.current.updateInfo(\r\n        \"Quick Sort:\",\r\n        \"Ω(nlogn)\",\r\n        \"Θ(nlogn)\",\r\n        \"O(n^2)\",\r\n        \"O(logn)\",\r\n        \"Yes, but still requires O(logn) memory for the stack\",\r\n        \"No, non-local swaps break stability\",\r\n        \"Fastest sorting algorithm in most cases. Is the algorithm of choice when speed matters and stability is not required. In practice it is best to choose the pivot at random to avoid worst case and potential attacks\"\r\n        );\r\n\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < animations.length; i++){\r\n            const barStyle = arrayBars[animations[i][1]].style;\r\n            if (animations[i][0] === \"comparison1\"){\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }else if (animations[i][0] === \"comparison2\"){\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }else if (animations[i][0] === \"comparison3\"){\r\n                setTimeout(() => {\r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;                \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }else if (animations[i][0] === \"comparison4\"){\r\n                setTimeout(() => {\r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                    barStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;             \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }else{\r\n                setTimeout(() => {\r\n                    const barHeight = parseInt(barStyle.height);\r\n    \r\n                    const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                    const barTwoHeight = parseInt(barTwoStyle.height);\r\n    \r\n                    barStyle.height = `${barTwoHeight}px`;\r\n                    barTwoStyle.height = `${barHeight}px`;                \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            \r\n            // Re-enable the buttons once last animation is processed\r\n            if (i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    this.toggleBtn();\r\n                    isRunning = false;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Re-enable button interactivity once animations are finished\r\n    toggleBtn(){\r\n        const idArray = [\"selectionSortBtn\", \"insertionSortBtn\", \"mergeSortBtn\", \"heapSortBtn\", \"quickSortBtn\"];\r\n        for(let i = 0; i < idArray.length; i++){\r\n            let btn =  document.getElementById(idArray[i]);\r\n            btn.disabled = !btn.disabled;   \r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return(\r\n            <>\r\n            <div className=\"header\">\r\n                <h1>Sorting Algorithm Visualiser</h1>\r\n                <p>Created by Jason Rising</p>\r\n                <div className=\"nav-bar\">\r\n                    <button id=\"resetBtn\" onClick={() => this.reset_array()}>Randomise Array</button>\r\n                    <button id=\"selectionSortBtn\" onClick={() => this.selection_sort()}>Selection Sort</button>\r\n                    <button id=\"insertionSortBtn\" onClick={() => this.insertion_sort()}>Insertion Sort</button>\r\n                    <button id=\"mergeSortBtn\" onClick={() => this.merge_sort()}>Merge Sort</button>\r\n                    <button id=\"heapSortBtn\" onClick={() => this.heap_sort()}>Heap Sort</button>\r\n                    <button id=\"quickSortBtn\" onClick={() => this.quick_sort()}>Quick Sort</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div className=\"array-bar\" \r\n                    key={idx} \r\n                    style={{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div> \r\n            <AlgorithmInfo ref={this.AlgorithmInfoElement}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass AlgorithmInfo extends React.Component {\r\n    state = {\r\n        name: \"No Algorithm Selected\",\r\n        bestCase: \"\",\r\n        avgCase: \"\",\r\n        worstCase: \"\",\r\n\r\n        spaceC: \"\",\r\n\r\n        inPlace: \"\",\r\n        stable: \"\",\r\n        misc: \"\",\r\n    };\r\n\r\n\r\n    updateInfo(Newname, NewBest, NewAvg, NewWorst, NewSpace, NewInPlace, NewStable, NewMisc){\r\n        this.setState({\r\n            name: Newname,\r\n            bestCase: NewBest,\r\n            avgCase: NewAvg,\r\n            worstCase: NewWorst,\r\n            spaceC: NewSpace,\r\n            inPlace: NewInPlace,\r\n            stable: NewStable,\r\n            misc: NewMisc\r\n        });\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className='info-container'>\r\n                <h1>{this.state.name}</h1>\r\n                <div className='grid'>\r\n                    <div>\r\n                        <h1>Time Complexity</h1>\r\n                        <p><strong>Best Case: </strong>{this.state.bestCase}</p>\r\n                        <p><strong>Average Case: </strong>{this.state.avgCase}</p>\r\n                        <p><strong>Worst Case: </strong>{this.state.worstCase}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>Space Complexity</h1>\r\n                        <p><strong>Worst Case: </strong>{this.state.spaceC}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>General Info</h1>\r\n                        <p><strong>In-place: </strong>{this.state.inPlace}</p>\r\n                        <p><strong>Stable: </strong>{this.state.stable}</p>\r\n                        <p><strong>Misc: </strong>{this.state.misc}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nfunction random_int_from_interval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nwindow.onresize = function(){\r\n    window.location.reload(false);\r\n}\r\n","/**\r\n * \r\n * Insertion Sort Information\r\n * Time Complexites:\r\n *      Best: Ω(n)\r\n *      Avg: Θ(n^2)\r\n *      Worst: O(n^2)\r\n * \r\n * Space Complexity: O(1)\r\n * In-place: Yes\r\n * Stable: Yes\r\n */\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    insertionSort(array, array.length, animations);\r\n    return animations;\r\n}\r\n\r\n// Main processing function\r\nfunction insertionSort(array, n, animations){\r\n    for (let i = 0; i < n; i++){\r\n        let v = array[i];\r\n        let j = i - 1;\r\n\r\n        animations.push([\"comparison1\", i]);\r\n\r\n        while(j >= 0 && array[j] > v){\r\n            animations.push([\"comparison1\", j]);\r\n            array[j + 1] = array[j];\r\n            animations.push([\"changeHeight\", j + 1, array[j]]);\r\n            animations.push([\"comparison2\", j]); \r\n            j--;\r\n        }\r\n        array[j + 1] = v;\r\n        animations.push([\"changeHeight\", j + 1, v]);\r\n        animations.push([\"comparison2\", i]);\r\n    }\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualiser/SortingVisualiser';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}